Essayons de voir ce dont on a besoin pour écrire au mieux le code du PRU...

-> pulse_init
-> strong pullup control
-> read/write bit
-> read/write byte (to reduce accesses between PRU and lib)
-> optionnal waits (strong pullup)

As PRU controls clock with better accuracy, read/writes won't fail because of timing issues.
So there is no need for error checking

As PRU access directly to GPIO, it is not possible to have a (port, pin) to access them.
There will be a GPIO-registers base address (C-lib will select the right GPIO module) and a pin mask...

As PRU has very little procedural workflow, the number of "functions" has to be very low.
- pin_set_dir_in    (u32 GPIO base, u32 mask)
- pin_set_dir_out   (u32 GPIO base, u32 mask)
- pin_set_low       (u32 GPIO base, u32 mask)
- pin_set_high      (u32 GPIO base, u32 mask)
- pin_get           (u32 GPIO base, u32 mask) <- will write 0 in base if not signal
- wait              (u32 nTenNano, u32) <- accurate (>10) but other commands are not instant
Must activate it's internal cycle counter to accurately timestamp its actions

Higher level functions are chained sequence of low level actions.
So we can put that in an array (each | | is a u32 in memory):
| n_actions | action code | GPIO base | mask | action code | GPIO base | mask | ...
And a linked chain in C:
struct Action {
  u32 base or read
  u32 mask
  Action *next }
(maybe an array too, it's simpler ^^)

There will be a write_chain and a read_chain <- used to read the GPIO value
Then, an execute_chain launches the chain, waits for interrupt

PRU "SHARED memory" map (size 12kB == 0x3000):
- 0x00 -> 0xFF : configuration
- 0x0100 -> 0x1904 : action chain (512 actions)

Configuration part:
| bTreatActionChain |
