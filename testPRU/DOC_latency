Tests de latence sur P9_13 et P9_14

P9_13 est gpio0_31, avec GPIO0 en 0x44E07000
P9_14 est gpio1_18, avec GPIO1 en 0x4804C000

Les offsets :
#define GPIO_OE            0x0134
#define GPIO_DATAOUT       0x013C
#define GPIO_CLEARDATAOUT  0x0190
#define GPIO_SETDATAOUT    0x0194

Protocole :
- écrire sur GPIO_OE pour mettre les pins en mode sortie
- attendre (combien de temps ?)
- lire DATAOUT et mettre le gpio à 0 si il ne l'est pas (attendre)
- Pour chaque pin :
  - écrire SETDATAOUT, attendre en comptant que DATAOUT soit écrit <- devrait donner la latence totale, en x10 nanosecondes
  - écrire CLEARDATAOUT, attendre en comptant que DATAOUT soit écrit <- devrait donner la latence totale, en x10 nanosecondes

Observons si le temps de clear est aussi long que SET:
// USELESS
- écrire CLEARDATAOUT sur P9_13 et P9_14, attendre
- écrire SETDATAOUT sur P9_13, attendre
- écrire CLEARDATAOUT sur P9_13
- écrire SETDATAOUT sur P9_14, attendre, et voir à l'oscillo

Protocole Stroboscope (but : mesurer le temps que met un pin à passer à 1 quand on a mesuré DATAOUT) :
// Non plus, j'ai l'impression qu'il y moyen, mais pas moyen de faire...
// Il y a probablement à faire en utilisant un pin en mode GPO et considérer qu'il n'y a pas de latence...
- remettre à 0 les sorties, attendre
- lire la période d'attente fWait dans la mémoire partagée
- faire plein de fois :
  - SET P9_13, attendre fWait
  - CLEAR
  
Protocole Stroboscope (but : mesurer la fréquence maximale de rafraichissement
- remettre à 0 les sorties, attendre
- lire la période d'attente fWait dans la mémoire partagée
- faire plein de fois :
  - SET P9_13, attendre fWait
  - CLEAR P9_13, attendre fWait
  (observer à l'oscillo quand ça devient dégueu)






---------
 RESULTS
---------

- Asserting a GPIO output is set or cleared by reading GPIO_DATAOUT takes around 50ns (4 MHz)
- SBBO to local memory is 2 cycles, LBCO is 4 cycles.
  Somewhere in the doc (in "7.1.1.1 GPMC Features" of the full technical doc),
  it is said "Up to 100 MHz external memory clock performance (single device)",
  so this result is not that bad, assuming xBCO needs to access its configuration registers first.
- Access times to on-chip memory is very well defined: LBBO LBCO SBBO SBCO should be measured with more care...
- Now with the digital oscilloscope (cf latence1-x.png where x is the "waiting" time):
  The goal is to SET the GPIO (through slow L4 memory), wait x time, CLEAR the GPIO, wait x, SET, wait x, CLEAR, LOOP.
  So there are 2 SET-wait-CLEAR-wait per iteration of the loop. So we can see the time taken to read the shared memory...
  Signal is "clean" when asking 2µs delay. Not so much 250kHz...
  Signal is "clean" when asking 0.980µs, almost exactly 500kHZ on 2 periods.
   -> time taken to access mem is 40ns, which was given by the previous experiment.
  Signal is not clean for 180ns. Is that the measure? It was not cleaner putting a 10kOhm resistor between GND and GPIO...
  Signal is barely a signal for 10ns... And the period is 80ns instead of 10ns (sync with L4 writes, again)
- So, what would look like a 5ns signal in direct mode? I don't trust the oscilloscope enough to try it...

